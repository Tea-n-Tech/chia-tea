"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import chia_tea.protobuf.generated.chia_pb2
import chia_tea.protobuf.generated.hardware_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class EventType(_EventType, metaclass=_EventTypeEnumTypeWrapper):
    """What type of update event happened
    during monitoring:
    - NONE: default value to have a null value, should never be encountered
    - ADD: adding of a resources such as a new plot
    - UPDATE: change of data e.g. reporting new CPU data
    - DELETE: deletion of a resource such as a chia process crashing
    """
    pass
class _EventType:
    V = typing.NewType('V', builtins.int)
class _EventTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_EventType.V], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    NONE = EventType.V(0)
    ADD = EventType.V(1)
    UPDATE = EventType.V(2)
    DELETE = EventType.V(3)

NONE = EventType.V(0)
ADD = EventType.V(1)
UPDATE = EventType.V(2)
DELETE = EventType.V(3)
global___EventType = EventType


class ComputerInfo(google.protobuf.message.Message):
    """IMPORTANT:
    all 'repeated' messages must have
    an attribute 'id'
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TIMESTAMP_FIELD_NUMBER: builtins.int
    MACHINE_ID_FIELD_NUMBER: builtins.int
    CPU_FIELD_NUMBER: builtins.int
    RAM_FIELD_NUMBER: builtins.int
    DISKS_FIELD_NUMBER: builtins.int
    FARMER_FIELD_NUMBER: builtins.int
    FARMER_HARVESTERS_FIELD_NUMBER: builtins.int
    HARVESTER_FIELD_NUMBER: builtins.int
    HARVESTER_PLOTS_FIELD_NUMBER: builtins.int
    WALLET_FIELD_NUMBER: builtins.int
    PROCESSES_FIELD_NUMBER: builtins.int
    timestamp: builtins.float = ...
    """This information is used to keep track
    of all information inserted into the 
    database
    """

    machine_id: builtins.int = ...
    @property
    def cpu(self) -> chia_tea.protobuf.generated.hardware_pb2.Cpu:
        """All kind of information about the hardware"""
        pass
    @property
    def ram(self) -> chia_tea.protobuf.generated.hardware_pb2.Ram: ...
    @property
    def disks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[chia_tea.protobuf.generated.hardware_pb2.Disk]: ...
    @property
    def farmer(self) -> chia_tea.protobuf.generated.chia_pb2.Farmer:
        """plotting
        chia_pb2.PlottingJob plotting_progress = 6;

        farmer
        """
        pass
    @property
    def farmer_harvesters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[chia_tea.protobuf.generated.chia_pb2.HarvesterViewedFromFarmer]: ...
    @property
    def harvester(self) -> chia_tea.protobuf.generated.chia_pb2.Harvester:
        """harvester"""
        pass
    @property
    def harvester_plots(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[chia_tea.protobuf.generated.chia_pb2.HarvesterPlot]: ...
    @property
    def wallet(self) -> chia_tea.protobuf.generated.chia_pb2.Wallet:
        """wallet"""
        pass
    @property
    def processes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[chia_tea.protobuf.generated.chia_pb2.Process]:
        """system processes relevant to chia"""
        pass
    def __init__(self,
        *,
        timestamp : builtins.float = ...,
        machine_id : builtins.int = ...,
        cpu : typing.Optional[chia_tea.protobuf.generated.hardware_pb2.Cpu] = ...,
        ram : typing.Optional[chia_tea.protobuf.generated.hardware_pb2.Ram] = ...,
        disks : typing.Optional[typing.Iterable[chia_tea.protobuf.generated.hardware_pb2.Disk]] = ...,
        farmer : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Farmer] = ...,
        farmer_harvesters : typing.Optional[typing.Iterable[chia_tea.protobuf.generated.chia_pb2.HarvesterViewedFromFarmer]] = ...,
        harvester : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Harvester] = ...,
        harvester_plots : typing.Optional[typing.Iterable[chia_tea.protobuf.generated.chia_pb2.HarvesterPlot]] = ...,
        wallet : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Wallet] = ...,
        processes : typing.Optional[typing.Iterable[chia_tea.protobuf.generated.chia_pb2.Process]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"cpu",b"cpu",u"farmer",b"farmer",u"harvester",b"harvester",u"ram",b"ram",u"wallet",b"wallet"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"cpu",b"cpu",u"disks",b"disks",u"farmer",b"farmer",u"farmer_harvesters",b"farmer_harvesters",u"harvester",b"harvester",u"harvester_plots",b"harvester_plots",u"machine_id",b"machine_id",u"processes",b"processes",u"ram",b"ram",u"timestamp",b"timestamp",u"wallet",b"wallet"]) -> None: ...
global___ComputerInfo = ComputerInfo

class UpdateEvent(google.protobuf.message.Message):
    """Update Event describes the incremental change of ComputerInfo

    Context:
      Since ComputerInfo represents the whole state, it is also quite
      heavy. It does not make sense to send the whole state of a computer
      containing possibly thousands of entries such as plots every few seconds.

    Technical Details:
      The monitoring client collects a new ComputerInfo every few seconds depending 
      on the config. It then compares the old and new ComputerInfo and creates the 
      corresponding UpdateEvent in case of deviations. These events are then sent
      to the server. There is a throttle for data which always changes such as CPU 
      in the config. The names in the config under 'monitoring.client.send_data_every' 
      are the same names as found in 'event_data'.

    Constraints:
      UpdateEvent must have the very same entries such as ComputerInfo but 
      without the attribute 'repeated'. Only the types need to match but not
      the names.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    EVENT_TYPE_FIELD_NUMBER: builtins.int
    CPU_FIELD_NUMBER: builtins.int
    RAM_FIELD_NUMBER: builtins.int
    DISK_FIELD_NUMBER: builtins.int
    FARMER_FIELD_NUMBER: builtins.int
    FARMER_HARVESTER_FIELD_NUMBER: builtins.int
    HARVESTER_PLOT_FIELD_NUMBER: builtins.int
    HARVESTER_FIELD_NUMBER: builtins.int
    WALLET_FIELD_NUMBER: builtins.int
    PROCESS_FIELD_NUMBER: builtins.int
    event_type: global___EventType.V = ...
    @property
    def cpu(self) -> chia_tea.protobuf.generated.hardware_pb2.Cpu:
        """hardware"""
        pass
    @property
    def ram(self) -> chia_tea.protobuf.generated.hardware_pb2.Ram: ...
    @property
    def disk(self) -> chia_tea.protobuf.generated.hardware_pb2.Disk: ...
    @property
    def farmer(self) -> chia_tea.protobuf.generated.chia_pb2.Farmer:
        """chia"""
        pass
    @property
    def farmer_harvester(self) -> chia_tea.protobuf.generated.chia_pb2.HarvesterViewedFromFarmer: ...
    @property
    def harvester_plot(self) -> chia_tea.protobuf.generated.chia_pb2.HarvesterPlot: ...
    @property
    def harvester(self) -> chia_tea.protobuf.generated.chia_pb2.Harvester: ...
    @property
    def wallet(self) -> chia_tea.protobuf.generated.chia_pb2.Wallet: ...
    @property
    def process(self) -> chia_tea.protobuf.generated.chia_pb2.Process:
        """chia_pb2.PlottingJob plotting_job = 12;"""
        pass
    def __init__(self,
        *,
        event_type : global___EventType.V = ...,
        cpu : typing.Optional[chia_tea.protobuf.generated.hardware_pb2.Cpu] = ...,
        ram : typing.Optional[chia_tea.protobuf.generated.hardware_pb2.Ram] = ...,
        disk : typing.Optional[chia_tea.protobuf.generated.hardware_pb2.Disk] = ...,
        farmer : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Farmer] = ...,
        farmer_harvester : typing.Optional[chia_tea.protobuf.generated.chia_pb2.HarvesterViewedFromFarmer] = ...,
        harvester_plot : typing.Optional[chia_tea.protobuf.generated.chia_pb2.HarvesterPlot] = ...,
        harvester : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Harvester] = ...,
        wallet : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Wallet] = ...,
        process : typing.Optional[chia_tea.protobuf.generated.chia_pb2.Process] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"cpu",b"cpu",u"disk",b"disk",u"event_data",b"event_data",u"farmer",b"farmer",u"farmer_harvester",b"farmer_harvester",u"harvester",b"harvester",u"harvester_plot",b"harvester_plot",u"process",b"process",u"ram",b"ram",u"wallet",b"wallet"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"cpu",b"cpu",u"disk",b"disk",u"event_data",b"event_data",u"event_type",b"event_type",u"farmer",b"farmer",u"farmer_harvester",b"farmer_harvester",u"harvester",b"harvester",u"harvester_plot",b"harvester_plot",u"process",b"process",u"ram",b"ram",u"wallet",b"wallet"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"event_data",b"event_data"]) -> typing.Optional[typing_extensions.Literal["cpu","ram","disk","farmer","farmer_harvester","harvester_plot","harvester","wallet","process"]]: ...
global___UpdateEvent = UpdateEvent
