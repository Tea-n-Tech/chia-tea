# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Lint, Test and Upload

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.7, "3.10"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Task
        run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          ./bin/task setup

      - name: Lint code
        run: ./bin/task lint

      - name: Test code
        run: ./bin/task test

  upload:
    runs-on: ubuntu-latest

    needs: build-and-test
    environment:
      name: deployment
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      # useful since we trigger on push and pr
      - name: Cancel previous runs on the same branch
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          ./bin/task setup

      - name: Build packages for release
        run: |
          ./bin/task build

      - name: Save packages as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
          if-no-files-found: error

      - name: Publish distribution to Test PyPI
        env:
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 1
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: poetry run twine upload --skip-existing --verbose 'dist/*'

      - name: Publish distribution to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_NON_INTERACTIVE: 1
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry run twine upload --skip-existing --verbose 'dist/*'
          poetry run mkdocs gh-deploy --force

      - name: Publish Docs
        run: |
          task build-docs
          task publish-docs
